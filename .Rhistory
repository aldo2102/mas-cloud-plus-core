plot(dados$vCPU,residuals(ajusteCPUUsado), main="Gráfico dos Resíduos da Variável Qtde de de CPUs (e)",xlab="Quantidade de CPUs", ylab = "Resíduos")
require(xts)
require(xts)
require(xts)
library(plyr)
library(stringr)
library(dplyr)
setwd("D:/Dropbox/workspace/ProjetoMestrado")
dados <- read.csv2("baseR.csv", sep = ",")
CPUUsado =log10(as.numeric(as.character(dados$CPU.USED)))
tempo=as.numeric(as.character(dados$Time))
tempo=log10(as.numeric(as.character(dados$Time)))
CPUUsado=log10(as.numeric(as.character(dados$CPU.USED)))
agentes =log10(dados$Agents)
agentesNaoLog = dados$Agents
vCPULog =log10(dados$vCPU)
vCPU =dados$vCPU
ajusteTime = lm(tempo ~ agentes + vCPULog )
ajusteCPUUsado = lm(CPUUsado ~ agentes + vCPU)
#ajusteTime = lm(tempo ~ dados$Agents + dados$vCPU)
#ajusteCPUUsado = lm(CPUUsado ~ dados$Agents + dados$vCPU)
summary(ajusteCPUUsado)
#_______________________________________________________________________
#estimativa
estimateTime = function(vCPU, agentes){
cpu <- vCPU
agentes <- agentes
dfEstimate <- data.frame(cpu, cpu)
estimate <- predict(ajusteTime, dfEstimate)
return(estimate)
}
estimateCPUUsed = function(vCPU, agentes){
cpu <- c(vCPU)
agentes <- c(agentes)
dfEstimate <- data.frame(cpu, cpu)
estimate <- predict(ajusteCPUUsado, dfEstimate)
return(estimate)
}
TempoRegre=estimateTime(vCPULog,agentes)
CPURegre=estimateCPUUsed(dados$vCPU,dados$Agents)
dados$tempoLOG=log10(as.numeric(as.character(dados$Time)))
dados$CPUUsadoLOG=log10(as.numeric(as.character(dados$CPU.USED)))
dados$TempoRegre=estimateTime(CPU,agentes)
dados$CPURegre=estimateCPUUsed(CPU,agentes)
dados$erroTempo=abs(dados$tempoLOG-dados$TempoRegre)
dados$erroCPU=abs(dados$CPUUsadoLOG-dados$CPURegre)
dados$tempoRealEstimado=10^(dados$TempoRegre)
dados$CPUUsadoRealEstimado=10^(dados$CPURegre)
#_______________________________________________________________________
par(mfrow=c(3,2))
plot(residuals(ajusteCPUUsado), main = "Gráfico  dos Resíduos (a)", ylab = "Resíduos", xlab = "Índex")
eruption.stdres = rstandard(ajusteCPUUsado)
qqnorm(eruption.stdres, main = "Gráfico de Probabilidade Normal dos Resíduos (b)", ylab="Quantis da Amostra",
xlab="Quantis teóricos")
qqline(eruption.stdres, col="red")
plot(residuals(ajusteCPUUsado) ~ fitted(ajusteCPUUsado), main="Gráfico dos Resíduos vs. Valores Preditos (c)",
ylab="Resíduos",xlab="Valores preditos", col="black")
abline(h=mean(residuals(ajusteCPUUsado)), col ="red")
plot(dados$Agents,residuals(ajusteCPUUsado), main="Gráfico dos Resíduos da Variável Qtde de Agentes (d)",xlab="Quantidade de Agentes", ylab = "Resíduos")
abline(h=mean(residuals(ajusteCPUUsado)), col ="red")
plot(dados$vCPU,residuals(ajusteCPUUsado), main="Gráfico dos Resíduos da Variável Qtde de de CPUs (e)",xlab="Quantidade de CPUs", ylab = "Resíduos")
abline(h=mean(residuals(ajusteCPUUsado)), col ="red")
TempoRegre
#_________________________________________________________________
par(mfrow=c(3,2))
plot(residuals(ajusteTime), main = "Gráfico  dos Resíduos (a)", ylab = "Resíduos", xlab = "Índex")
eruption.stdres = rstandard(ajusteTime)
qqnorm(eruption.stdres, main = "Gráfico de Probabilidade Normal dos Resíduos (b)", ylab="Quantis da Amostra",
xlab="Quantis teóricos")
qqline(eruption.stdres, col="red")
plot(residuals(ajusteTime) ~ fitted(ajusteTime), main="Gráfico dos Resíduos vs. Valores Preditos  (c)",
ylab="Resíduos",xlab="Valores preditos", col="black")
abline(h=mean(residuals(ajusteTime)), col ="red")
plot(log10(dados$Agents),residuals(ajusteTime), main="Gráfico dos Resíduos da Variável Qtde de Agentes (d)",xlab="Quantidade de Agentes", ylab = "Resíduos")
abline(h=mean(residuals(ajusteTime)), col ="red")
plot(dados$vCPU,residuals(ajusteTime), main="Gráfico dos Resíduos da Variável Qtde de CPUs (e)",xlab="Quantidade de CPUs", ylab = "Resíduos")
abline(h=mean(residuals(ajusteTime)), col ="red")
#-----------------------------------------
div=756
TempoEMQ<-(TempoRegre-tempo)
TempoEmqInverso<-(tempo-TempoRegre)
TempoEMQ2<-(TempoRegre-tempo)^2
TempoDiv<-abs(TempoEmqInverso / tempo)
biasTempo <- sum(TempoEMQ)/div
maeTempo <- sum(abs(TempoEMQ))/div
rmseTempo <- sqrt(sum(TempoEMQ2)/div)
mapeTempo <- (sum(TempoDiv))/div*100
biasTempo
maeTempo
rmseTempo
mapeTempo
#------------------------------------------
CPUEMQ<-(CPURegre-CPUUsado)
CPUEmqInverso<-(CPUUsado-CPURegre)
CPUEMQ2<-(CPURegre-CPUUsado)^2
CPUDiv<-abs(CPUEmqInverso / CPUUsado)
biasCPU <- sum(CPUEMQ)/div
maeCPU <- sum(abs(CPUEMQ))/div
rmseCPU <- sqrt(sum(CPUEMQ2)/div)
mapeCPU <- (sum(CPUDiv))/div*100
biasCPU
maeCPU
rmseCPU
mapeCPU
#--------------------------------------------
par(mfrow=c(2,1))
hist((as.numeric(as.character(dados$Time))),xlab="Tempo",ylab = "Frequência", main="(a) Histograma Tempo")
hist(dados$tempoLOG ,xlab="Log(tempo)",ylab = "Frequência", main="(b) Histograma log(Tempo)")
par(mfrow=c(2,1))
hist((as.numeric(as.character(dados$CPU.USED))),xlab="Uso de CPU",ylab = "Frequência", main=" (a) Histograma Uso de CPU")
hist(dados$CPUUsadoLOG ,xlab="Log(tempo)",ylab = "Frequência", main="(b) Histograma log(Uso de CPU)")
#--------------------------------------------
#library(xlsx)
#write.xlsx(dados, "D:/Dropbox/workspace/ProjetoMestrado/arquivo.xlsx")
